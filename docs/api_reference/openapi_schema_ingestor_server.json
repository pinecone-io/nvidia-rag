{
  "openapi": "3.1.0",
  "info": {
    "title": "APIs for NVIDIA RAG Ingestion Server",
    "description": "This API schema describes all the Ingestion endpoints exposed for NVIDIA RAG server Blueprint",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health APIs"
        ],
        "summary": "Health Check",
        "description": "Perform a Health Check\n\nArgs:\n    check_dependencies: If True, check health of all dependent services.\n                       If False (default), only report that the API service is up.\n\nReturns 200 when service is up and includes health status of all dependent services when requested.",
        "operationId": "health_check_health_get",
        "parameters": [
          {
            "name": "check_dependencies",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Check Dependencies"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "post": {
        "tags": [
          "Ingestion APIs"
        ],
        "summary": "Upload Document",
        "description": "Upload a document to the vector store.",
        "operationId": "upload_document_documents_post",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_document_documents_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Background Ingestion Started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionTaskResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Ingestion APIs"
        ],
        "summary": "Update Documents",
        "description": "Upload a document to the vector store. If the document already exists, it will be replaced.",
        "operationId": "update_documents_documents_patch",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_documents_documents_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Ingestion APIs"
        ],
        "summary": "Get Documents",
        "description": "Get list of document ingested in vectorstore.",
        "operationId": "get_documents_documents_get",
        "parameters": [
          {
            "name": "collection_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "multimodal_data",
              "title": "Collection Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ingestion APIs"
        ],
        "summary": "Delete Documents",
        "operationId": "delete_documents_documents_delete",
        "parameters": [
          {
            "name": "collection_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "multimodal_data",
              "title": "Collection Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Document Names"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Ingestion APIs"
        ],
        "summary": "Get Task Status",
        "description": "Get the status of an ingestion task.",
        "operationId": "get_task_status_status_get",
        "parameters": [
          {
            "name": "task_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionTaskStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "Vector DB APIs"
        ],
        "summary": "Get Collections",
        "description": "Endpoint to get a list of collection names from the Milvus server.\nReturns a list of collection names.",
        "operationId": "get_collections_collections_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionListResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vector DB APIs"
        ],
        "summary": "Create Collections",
        "description": "This endpoint is deprecated. Use POST /collection instead. Custom metadata is not supported in this endpoint.",
        "operationId": "create_collections_collections_post",
        "deprecated": true,
        "parameters": [
          {
            "name": "collection_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "text",
              "title": "Collection Type"
            }
          },
          {
            "name": "embedding_dimension",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 2048,
              "title": "Embedding Dimension"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Collection Names"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vector DB APIs"
        ],
        "summary": "Delete Collections",
        "operationId": "delete_collections_collections_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Collection Names"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collection": {
      "post": {
        "tags": [
          "Vector DB APIs"
        ],
        "summary": "Create Collection",
        "description": "Endpoint to create a collection from the Milvus server.\nReturns status message.",
        "operationId": "create_collection_collection_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                }
              }
            }
          },
          "499": {
            "description": "Client Closed Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "The client cancelled the request"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error occurred"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_update_documents_documents_patch": {
        "properties": {
          "documents": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Documents"
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "JSON data in string format containing metadata about the documents which needs to be uploaded.",
            "examples": [
              "{\"collection_name\": \"multimodal_data\", \"blocking\": false, \"split_options\": {\"chunk_size\": 512, \"chunk_overlap\": 150}, \"custom_metadata\": [], \"generate_summary\": false}"
            ]
          }
        },
        "type": "object",
        "required": [
          "documents",
          "data"
        ],
        "title": "Body_update_documents_documents_patch"
      },
      "Body_upload_document_documents_post": {
        "properties": {
          "documents": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Documents"
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "JSON data in string format containing metadata about the documents which needs to be uploaded.",
            "examples": [
              "{\"collection_name\": \"multimodal_data\", \"blocking\": false, \"split_options\": {\"chunk_size\": 512, \"chunk_overlap\": 150}, \"custom_metadata\": [], \"generate_summary\": false}"
            ]
          }
        },
        "type": "object",
        "required": [
          "documents",
          "data"
        ],
        "title": "Body_upload_document_documents_post"
      },
      "CollectionListResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message indicating the status of the request.",
            "default": ""
          },
          "total_collections": {
            "type": "integer",
            "title": "Total Collections",
            "description": "Total number of collections uploaded.",
            "default": 0
          },
          "collections": {
            "items": {
              "$ref": "#/components/schemas/UploadedCollection"
            },
            "type": "array",
            "title": "Collections",
            "description": "List of uploaded collections.",
            "default": []
          }
        },
        "type": "object",
        "title": "CollectionListResponse",
        "description": "Response model for uploading a document."
      },
      "CollectionsResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message of the process."
          },
          "successful": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Successful",
            "description": "List of successfully created or deleted collections."
          },
          "failed": {
            "items": {
              "$ref": "#/components/schemas/FailedCollection"
            },
            "type": "array",
            "title": "Failed",
            "description": "List of collections that failed to be created or deleted."
          },
          "total_success": {
            "type": "integer",
            "title": "Total Success",
            "description": "Total number of collections successfully created or deleted.",
            "default": 0
          },
          "total_failed": {
            "type": "integer",
            "title": "Total Failed",
            "description": "Total number of collections that failed to be created or deleted.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "CollectionsResponse",
        "description": "Response model for creation or deletion of collections in Milvus."
      },
      "CreateCollectionRequest": {
        "properties": {
          "vdb_endpoint": {
            "type": "string",
            "title": "Vdb Endpoint",
            "description": "Endpoint of the vector database.",
            "default": "http://milvus:19530"
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name of the collection.",
            "default": "multimodal_data"
          },
          "embedding_dimension": {
            "type": "integer",
            "title": "Embedding Dimension",
            "description": "Embedding dimension of the collection.",
            "default": 2048
          },
          "metadata_schema": {
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "type": "array",
            "title": "Metadata Schema",
            "description": "Metadata schema of the collection.",
            "default": []
          }
        },
        "type": "object",
        "title": "CreateCollectionRequest",
        "description": "Request model for creating a collection."
      },
      "CreateCollectionResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message of the process."
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name of the collection."
          }
        },
        "type": "object",
        "required": [
          "message",
          "collection_name"
        ],
        "title": "CreateCollectionResponse",
        "description": "Response model for creation or deletion of a collection in Milvus."
      },
      "DatabaseHealthInfo": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "latency_ms": {
            "type": "number",
            "title": "Latency Ms",
            "default": 0
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "collections": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collections"
          }
        },
        "type": "object",
        "required": [
          "service",
          "url",
          "status"
        ],
        "title": "DatabaseHealthInfo",
        "description": "Health info specific to database services"
      },
      "DocumentListResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message indicating the status of the request.",
            "default": ""
          },
          "total_documents": {
            "type": "integer",
            "title": "Total Documents",
            "description": "Total number of documents uploaded.",
            "default": 0
          },
          "documents": {
            "items": {
              "$ref": "#/components/schemas/UploadedDocument"
            },
            "type": "array",
            "title": "Documents",
            "description": "List of uploaded documents.",
            "default": []
          }
        },
        "type": "object",
        "title": "DocumentListResponse",
        "description": "Response model for uploading a document."
      },
      "FailedCollection": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name of the collection.",
            "default": ""
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message from the collection creation or deletion process.",
            "default": ""
          }
        },
        "type": "object",
        "title": "FailedCollection",
        "description": "Model representing a collection that failed to be created or deleted."
      },
      "FailedDocument": {
        "properties": {
          "document_name": {
            "type": "string",
            "title": "Document Name",
            "description": "Name of the document.",
            "default": ""
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message from the ingestion process.",
            "default": ""
          }
        },
        "type": "object",
        "title": "FailedDocument",
        "description": "Model representing an individual uploaded document."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 4096,
            "pattern": "[\\s\\S]*",
            "title": "Message",
            "default": "Service is up."
          },
          "databases": {
            "items": {
              "$ref": "#/components/schemas/DatabaseHealthInfo"
            },
            "type": "array",
            "title": "Databases"
          },
          "object_storage": {
            "items": {
              "$ref": "#/components/schemas/StorageHealthInfo"
            },
            "type": "array",
            "title": "Object Storage"
          },
          "nim": {
            "items": {
              "$ref": "#/components/schemas/NIMServiceHealthInfo"
            },
            "type": "array",
            "title": "Nim"
          },
          "processing": {
            "items": {
              "$ref": "#/components/schemas/ProcessingHealthInfo"
            },
            "type": "array",
            "title": "Processing"
          },
          "task_management": {
            "items": {
              "$ref": "#/components/schemas/TaskManagementHealthInfo"
            },
            "type": "array",
            "title": "Task Management"
          }
        },
        "type": "object",
        "title": "HealthResponse",
        "description": "Overall health response with specialized fields for each service type"
      },
      "IngestionTaskResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message indicating the status of the request.",
            "default": ""
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "Task ID of the ingestion process.",
            "default": ""
          }
        },
        "type": "object",
        "title": "IngestionTaskResponse",
        "description": "Response model for uploading a document."
      },
      "IngestionTaskStatusResponse": {
        "properties": {
          "state": {
            "type": "string",
            "title": "State",
            "description": "State of the ingestion task.",
            "default": ""
          },
          "result": {
            "$ref": "#/components/schemas/UploadDocumentResponse",
            "description": "Result of the ingestion task."
          }
        },
        "type": "object",
        "required": [
          "result"
        ],
        "title": "IngestionTaskStatusResponse",
        "description": "Response model for getting the status of an ingestion task."
      },
      "MetadataField": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the metadata field.",
            "default": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "datetime",
              "number",
              "integer",
              "float",
              "boolean",
              "array"
            ],
            "title": "Type",
            "description": "Type of the metadata field from the following: 'string', 'datetime', 'number', 'integer', 'float', 'boolean', 'array'.",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Optional description of the metadata field.",
            "default": ""
          },
          "array_type": {
            "type": "string",
            "enum": [
              "string",
              "number", 
              "integer",
              "float",
              "boolean"
            ],
            "title": "Array Type",
            "description": "Type of array elements (string, number, integer, float, boolean) - required when type is 'array'.",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether this field is required in metadata.",
            "default": false
          }
        },
        "type": "object",
        "title": "MetadataField",
        "description": "Model representing a metadata field."
      },
      "NIMServiceHealthInfo": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "latency_ms": {
            "type": "number",
            "title": "Latency Ms",
            "default": 0
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "http_status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Http Status"
          }
        },
        "type": "object",
        "required": [
          "service",
          "url",
          "status"
        ],
        "title": "NIMServiceHealthInfo",
        "description": "Health info specific to NIM services (LLM, embeddings, etc.)"
      },
      "ProcessingHealthInfo": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "latency_ms": {
            "type": "number",
            "title": "Latency Ms",
            "default": 0
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "http_status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Http Status"
          }
        },
        "type": "object",
        "required": [
          "service",
          "url",
          "status"
        ],
        "title": "ProcessingHealthInfo",
        "description": "Health info specific to document processing services"
      },
      "StorageHealthInfo": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "latency_ms": {
            "type": "number",
            "title": "Latency Ms",
            "default": 0
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "buckets": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buckets"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "service",
          "url",
          "status"
        ],
        "title": "StorageHealthInfo",
        "description": "Health info specific to object storage services"
      },
      "TaskManagementHealthInfo": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "latency_ms": {
            "type": "number",
            "title": "Latency Ms",
            "default": 0
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "service",
          "url",
          "status"
        ],
        "title": "TaskManagementHealthInfo",
        "description": "Health info specific to task management services"
      },
      "UploadDocumentResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Message indicating the status of the request.",
            "default": ""
          },
          "total_documents": {
            "type": "integer",
            "title": "Total Documents",
            "description": "Total number of documents uploaded.",
            "default": 0
          },
          "documents": {
            "items": {
              "$ref": "#/components/schemas/UploadedDocument"
            },
            "type": "array",
            "title": "Documents",
            "description": "List of uploaded documents.",
            "default": []
          },
          "failed_documents": {
            "items": {
              "$ref": "#/components/schemas/FailedDocument"
            },
            "type": "array",
            "title": "Failed Documents",
            "description": "List of failed documents.",
            "default": []
          },
          "validation_errors": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Validation Errors",
            "description": "List of validation errors.",
            "default": []
          }
        },
        "type": "object",
        "title": "UploadDocumentResponse",
        "description": "Response model for uploading a document."
      },
      "UploadedCollection": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name of the collection.",
            "default": ""
          },
          "num_entities": {
            "type": "integer",
            "title": "Num Entities",
            "description": "Number of rows or entities in the collection.",
            "default": 0
          },
          "metadata_schema": {
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "type": "array",
            "title": "Metadata Schema",
            "description": "Metadata schema of the collection.",
            "default": []
          }
        },
        "type": "object",
        "title": "UploadedCollection",
        "description": "Model representing an individual uploaded document."
      },
      "UploadedDocument": {
        "properties": {
          "document_name": {
            "type": "string",
            "title": "Document Name",
            "description": "Name of the document.",
            "default": ""
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata of the document.",
            "default": {

            }
          }
        },
        "type": "object",
        "title": "UploadedDocument",
        "description": "Model representing an individual uploaded document."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Health APIs",
      "description": "APIs for checking and monitoring server liveliness and readiness."
    },
    {
      "name": "Ingestion APIs",
      "description": "APIs for uploading, deletion and listing documents."
    },
    {
      "name": "Vector DB APIs",
      "description": "APIs for managing collections in vector database."
    }
  ]
}